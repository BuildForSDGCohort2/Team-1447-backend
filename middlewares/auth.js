const jwt = require("jsonwebtoken");
require("dotenv").config();

class Auth{
    /**
     * 
     * @param {Object} req 
     * @param {Object} res
     * @returns Token
     * @memberof Auth 
     */
    static verifyUser(req, res, next) {
        const token = req.headers["authorization"].split(' ')[1];
        // console.log(token);
        if (!token || token === undefined) {
          return res.status(403).json({
            status: "error",
            message: "You are not Authorize"
          });
        }
        jwt.verify(token, process.env.TOKEN_SECRET, (error, decode) => {
          if (error) {
            return res.status(500).json({ status: 500, error: "Expired Authorization ",});
          }
          req.user = decode.user_name;
          req.admin = decode.is_admin;
          req.email = decode.email;
          req.id = decode.user_id;
          next();
        });
      }

      /**
     * 
     * @param {Object} req 
     * @param {Object} res
     * @returns Token
     * @memberof Auth 
     */

     static verifyResetToken(req, res, next) {
       const {token} = req.params;

       // Checks the variable "token" to see if it is empty or undefined
       if (!token || token === "undefined") {
         res.token(403).json({
           status: "error",
           message: "You are not Authorize"
         });
       }

       // This is verify the jwt token to see it was generated by the code
       jwt.verify(token, process.env.TOKEN_SECRET, (error, decode) => {
         if (error) {
           return res.status(500).json({
             status: "error",
             message: "This token did not originate from us "
           })
         }
         req.email = decode.email;
         req.id = decode.user_id;
       })
       next();
     }
}

module.exports = Auth;